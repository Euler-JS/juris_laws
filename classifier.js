import OpenAI from 'openai';

/**
 * Classificador Inteligente
 * Detecta se o usu√°rio quer:
 * - CONSULTA: Informa√ß√£o t√©cnica objetiva sobre leis
 * - ASSISTENCIA: Ajuda com situa√ß√£o pessoal/problema real
 */
export class IntentClassifier {
  constructor(openaiApiKey) {
    this.openai = new OpenAI({ apiKey: openaiApiKey });
  }

  /**
   * Classifica a inten√ß√£o do usu√°rio
   * @param {string} pergunta - Pergunta do usu√°rio
   * @returns {Promise<Object>} { modo: 'consulta'|'assistencia', confianca: number, analise: {...} }
   */
  async classify(pergunta) {
    const prompt = `Voc√™ √© um classificador de inten√ß√µes para um sistema jur√≠dico de Mo√ßambique.

Analise a pergunta do usu√°rio e determine:

1. MODO (escolha um):
   - "consulta": Usu√°rio quer informa√ß√£o objetiva sobre leis (ex: "O que diz o artigo X?", "Qual a lei sobre Y?")
   - "assistencia": Usu√°rio tem problema pessoal e precisa de ajuda (ex: "Fui despedido...", "Estou sofrendo...", "O que posso fazer?")
   - "glossario": Usu√°rio quer explica√ß√£o de um termo jur√≠dico (ex: "O que √© usucapi√£o?", "O que significa justa causa?", "Explique regime de bens")

2. √ÅREA LEGAL (escolha uma ou mais):
   - direito_trabalho
   - direito_familia
   - direito_penal
   - direito_civil
   - direito_propriedade
   - direitos_humanos
   - outro

3. URG√äNCIA (escolha uma):
   - baixa: Pergunta acad√™mica ou curiosidade
   - media: Situa√ß√£o que requer aten√ß√£o
   - alta: Problema urgente, consequ√™ncias s√©rias

4. EMO√á√ÉO DETECTADA (escolha uma):
   - neutra: Tom objetivo
   - preocupacao: Tom de preocupa√ß√£o
   - desespero: Tom de urg√™ncia/desespero
   - raiva: Tom de revolta/injusti√ßa
   - confusao: Tom de d√∫vida/confus√£o

5. PROBLEMA (se modo = assistencia):
   - Descreva brevemente o problema principal em 1 frase

6. VULNERABILIDADES (se aplic√°vel):
   - Lista de fatores de vulnerabilidade detectados (ex: ["dependentes_menores", "situacao_financeira"])

Responda APENAS em formato JSON v√°lido:
{
  "modo": "consulta" ou "assistencia" ou "glossario",
  "confianca": 0.0-1.0,
  "area_legal": ["..."],
  "urgencia": "baixa|media|alta",
  "emocao": "neutra|preocupacao|desespero|raiva|confusao",
  "problema": "descri√ß√£o do problema" ou null,
  "vulnerabilidades": ["..."] ou [],
  "termo_glossario": "termo que usu√°rio quer explica√ß√£o" ou null,
  "reasoning": "breve explica√ß√£o da classifica√ß√£o"
}

PERGUNTA DO USU√ÅRIO:
"${pergunta}"`;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'Voc√™ √© um classificador especializado em detectar inten√ß√µes em consultas jur√≠dicas.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1, // Baixa temperatura para respostas consistentes
        response_format: { type: 'json_object' }
      });

      const result = JSON.parse(response.choices[0].message.content);
      
      console.log(`\nüéØ Classifica√ß√£o da pergunta:`);
      console.log(`   Modo: ${result.modo.toUpperCase()}`);
      console.log(`   Confian√ßa: ${(result.confianca * 100).toFixed(0)}%`);
      console.log(`   Urg√™ncia: ${result.urgencia}`);
      console.log(`   Emo√ß√£o: ${result.emocao}`);
      if (result.problema) {
        console.log(`   Problema: ${result.problema}`);
      }

      return result;
    } catch (error) {
      console.error('‚ùå Erro ao classificar pergunta:', error);
      // Fallback: assume consulta se houver erro
      return {
        modo: 'consulta',
        confianca: 0.5,
        area_legal: ['geral'],
        urgencia: 'media',
        emocao: 'neutra',
        problema: null,
        vulnerabilidades: [],
        reasoning: 'Classifica√ß√£o por fallback devido a erro'
      };
    }
  }

  /**
   * Extrai fatos relevantes da situa√ß√£o (para modo assist√™ncia)
   * @param {string} pergunta - Situa√ß√£o descrita pelo usu√°rio
   * @param {Object} classification - Resultado da classifica√ß√£o
   * @returns {Promise<Object>} Fatos extra√≠dos estruturados
   */
  async extractFacts(pergunta, classification) {
    if (classification.modo !== 'assistencia') {
      return null;
    }

    const prompt = `Voc√™ √© um extrator de fatos para casos jur√≠dicos em Mo√ßambique.

Analise a situa√ß√£o descrita e extraia os fatos relevantes de forma estruturada.

SITUA√á√ÉO:
"${pergunta}"

CONTEXTO DA CLASSIFICA√á√ÉO:
- √Årea legal: ${classification.area_legal.join(', ')}
- Problema: ${classification.problema}
- Vulnerabilidades: ${classification.vulnerabilidades.join(', ') || 'nenhuma'}

Extraia e estruture os seguintes fatos (responda em JSON):
{
  "problema_principal": "problema central em 1 frase",
  "problemas_secundarios": ["lista de problemas adicionais"],
  "contexto_temporal": "quando aconteceu (ex: recente, h√° 3 meses, etc)",
  "partes_envolvidas": {
    "usuario": "descri√ß√£o do usu√°rio",
    "outra_parte": "descri√ß√£o da outra parte (empregador, familiar, etc)"
  },
  "vulnerabilidades": {
    "tem_dependentes": true/false,
    "numero_dependentes": n√∫mero ou null,
    "situacao_financeira": "estavel|vulneravel|critica",
    "outras": ["lista de outras vulnerabilidades"]
  },
  "documentos_mencionados": ["lista de documentos que usu√°rio mencionou ter ou n√£o ter"],
  "acoes_ja_tomadas": ["o que usu√°rio j√° fez"],
  "perguntas_especificas": ["o que usu√°rio quer saber especificamente"]
}`;

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'Voc√™ √© um extrator de fatos especializado em casos jur√≠dicos.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        response_format: { type: 'json_object' }
      });

      const facts = JSON.parse(response.choices[0].message.content);
      
      console.log(`\nüìã Fatos extra√≠dos:`);
      console.log(`   Problema: ${facts.problema_principal}`);
      if (facts.vulnerabilidades.tem_dependentes) {
        console.log(`   ‚ö†Ô∏è  Tem ${facts.vulnerabilidades.numero_dependentes} dependentes`);
      }

      return facts;
    } catch (error) {
      console.error('‚ùå Erro ao extrair fatos:', error);
      return null;
    }
  }
}
